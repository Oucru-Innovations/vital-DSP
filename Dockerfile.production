# Multi-stage Dockerfile for vitalDSP Webapp Production Deployment
# Stage 1: Build stage
FROM python:3.10-slim as builder

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies for building
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create and activate virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements files
COPY requirements.txt /tmp/root_requirements.txt
COPY src/vitalDSP_webapp/requirements.txt /tmp/webapp_requirements.txt

# Install Python dependencies
RUN pip install --upgrade pip setuptools wheel
RUN pip install -r /tmp/root_requirements.txt
RUN pip install -r /tmp/webapp_requirements.txt

# Stage 2: Production stage
FROM python:3.10-slim as production

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app:/app/src \
    PORT=8000

# Create non-root user
RUN groupadd -r vitaldsp && useradd -r -g vitaldsp vitaldsp

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=vitaldsp:vitaldsp . /app

# Create necessary directories
RUN mkdir -p /app/uploads /app/logs /app/tmp && \
    chown -R vitaldsp:vitaldsp /app

# Install the package
RUN pip install -e .

# Switch to non-root user
USER vitaldsp

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:${PORT}/api/health || exit 1

# Start the application
CMD ["python", "src/vitalDSP_webapp/run_webapp.py"]
