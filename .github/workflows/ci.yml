name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - web
    paths-ignore:
      - 'docs/**'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PYTHONPATH: ./src  # Set PYTHONPATH to include the src directory

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest==8.1.1 pytest-cov==4.1.0 coverage==7.4.0 flake8 pandoc pandas httpx pytest-mock pytest-asyncio
          pip install setuptools wheel twine sphinx coveralls responses
          pip install dash dash[testing]
          pip install selenium webdriver-manager
      
      - name: Install Chrome and ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          sudo apt-get install -y xvfb

      - name: Run Tests and Generate Coverage with Xvfb (for headless browser)
        run: |
          Xvfb :99 &  # Start X virtual framebuffer for headless browser testing
          export DISPLAY=:99  # Set the DISPLAY environment variable to use Xvfb
          pytest --cov=src/vitalDSP --cov-config=.coveragerc --cov-report=html:cov_html  # Run tests and generate coverage that involve Selenium and Dash
  

      # - name: Generate Coverage Report
      #   run: pytest --cov=src/vitalDSP --cov-config=.coveragerc --cov-report=html:cov_html
        # run: pytest --cov=src --cov-config=.coveragerc --cov-report=html:cov_html


      - name: Run Linting
        # Note: F401 (unused imports) is ignored in .flake8 config
        run: make lint

      - name: Generate Documentation
        run: make pandoc

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: cov_html

      - name: Upload Documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: $(DOCS_DIR)
      
      - name: Start Uvicorn (background)
        run: nohup uvicorn src.webapp.run_webapp:fastapi_app --host 0.0.0.0 --port 8000 &

      # - name: Run Web App Tests
      #   run: pytest tests/  # Assuming having tests to run that require the app

      - name: Build package
        run: make build
      
      - name: Send coverage to Coveralls
        run: coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      # - name: Deploy to PyPI
      #   if: github.ref == 'refs/heads/main'
      #   run: make upload
      #   env:
      #     TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
      #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}